
from matplotlib.colors import LogNorm
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import stats
import glob
import argparse



def colourCodes(length):
    list_of_colours = []
    colour = 0
    colourStep = (255*3 / (length+1))
    for x in range(length):
        colour = colour + colourStep
        result = ''
        num = colour
        for a in range(3):
            if num >= 255:
                string = 'FF'
            else:
                string =  hex((num)/15)[-1:] + hex((num)%15)[-1:]
            num = num - 255
            result = result + string
        list_of_colours.append('#'+result)
    return list_of_colours

treatments = ['00','11','15','65']
genotypes = ['DB072','DB185','DB213']
colourlist = ['#0033CC','#33CC33','#FFAA00', '#CC3300', '#AAAAAA','#0032FF','r','c','m','y', '#000000', '#333333']
if __name__ == "__main__":

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--boutsfile', type=str, required=True,
                            help='full path to bouts.pickle, generated by bouts.py')  
    parser.add_argument('--parameter', type=str, required=False, default='Time (s)',
                            help='parameter for which to measure bouts')
    parser.add_argument('--min', type=float, required=False, default=0,
                            help='minimum range of histogram')
    parser.add_argument('--max', type=float, required=False, default=400,
                            help='maximum range of histogram')
    parser.add_argument('--bins', type=float, required=False, default=50,
                            help='number of bins for histogram')
    parser.add_argument('--log_bins', type=bool, required=False, default=False,
                            help='make True to generate a log-transformed set of bins.')
    parser.add_argument('--handle', type=str, required=False, default='',
                            help='give a string to select a subset of the dataset.')
    
    args = parser.parse_args()

    if args.log_bins == True:
        if args.min < 0:
            BINS = np.logspace(0, np.log10(args.max - args.min + 1.0), args.bins) - 1.0 + args.min
        elif args.min == 0:
            BINS = np.logspace(0, np.log10(args.max+1.0), args.bins) - 1.0
        else:
            BINS = np.logspace(np.log10(args.min), np.log10(args.max), args.bins)
    else:
        BINS = np.linspace(args.min, args.max, args.bins)
        
        
    bouts = pd.read_pickle(args.boutsfile)
    bouts = bouts[bouts['bout_duration'] > 0]
    g = bouts.groupby(['g1','g2','g3', 'FlyID'])
    df = pd.DataFrame()
    plt.xscale('log')
    plt.yscale('log')
    groups = set(bouts.FlyID)
    colourlist = colourCodes(len(groups))
    correlations = []
    groups = []
    for h, i in g:
        tempdf = pd.DataFrame({'ontime':i.onset_time , 'offtime':i.offset_time,'bout_duration':i.bout_duration,'FlyID':h[3], 'group':'-'.join(h[:-1])}) 
        tempdf['ibi'] = tempdf.shift(-1).ontime - tempdf.offtime
        tempdf['nextbout'] = tempdf.shift().bout_duration
        df = pd.concat([df, tempdf], axis=0)
        subset = tempdf[(tempdf.bout_duration.notnull())&(tempdf.nextbout.notnull())]
        correlations.append(stats.pearsonr(subset.bout_duration, subset.nextbout)[0])
        groups.append('-'.join(h[:-1]))
        
        plt.scatter(tempdf.bout_duration, tempdf.nextbout)
    plt.ylabel('Bout duration of next bout (s)')
    plt.xlabel('Bout duration (s)')
    plt.show()
    
    
    df.to_pickle(args.boutsfile.rsplit('.pickle')[0] + '_ibi.pickle')
    
    corrs = pd.DataFrame({'group':groups, 'Pearson':correlations})
    g = corrs.groupby('group')
    colourli
    plt.hist(correlations, bins=np.arange(0,1,0.05))
    plt.show()
    
    
